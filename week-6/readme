DS WEEK-6
Write a program that implement stack (its operations) using
A. Arrays           
B. Pointers
Implement following operations
i) Push   
ii)Pop   
iii) Is_Stack_Full     
iv) Is-Stack_Empty
Program :
// stack implementation using arrays
#include<stdio.h>
#include<stdlib.h>
#define maxsize 5
int a[maxsize],top=-1;
void push(int item)
{
	top++;
	a[top]=item;
}
int pop()
{
	return(a[top--]);
}
int isfull()
{
	if(top==maxsize-1)
	return 1;
	else
	return 0;
}
int isempty()
{
	if(top==-1)
	return 1;
	else
	return 0;
}
int peek()
{
	return(a[top]);
}
void display()
{
	for(int i=top;i>=0;i--)
	printf("%d ",a[i]);
}
int main()
{
	int ch,x;
	while(1)
	{
		printf("\n1-push\n2-pop\n3-display\n4-peek\n5-exit\n");
		printf("enter ur choice\n");
		scanf("%d",&ch);
		switch(ch)
		{
		case 1: if(isfull())
			printf("stack overflow\n");
			else
			{
			printf("enter data to push\n");
			scanf("%d",&x);
			push(x);
			}
			break;
		case 2: if(isempty())
			printf("stack underflow\n");
			else
			{
			x=pop();
			printf("deleted element is %d\n",x);
			}
			break;
		case 3: display();
			break;
		case 4: printf("top most element on the stack is %d\n", peek());
			break;
		case 5: exit(0);
		}
	}
}
	
Output :



C:\TDM-GCC-64\dslab>stackarr

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
1
enter data to push
2

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
1
enter data to push
4

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
1
enter data to push
6

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
1
enter data to push
8

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
3
8 6 4 2
1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
2
deleted element is 8

1-push
2-pop
3-display
4-peek
5-exit
enter ur choice
4
top most element on the stack is 6

1-push
2-pop
3-display
4-peek
5-exit

5



#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node*next;
};
struct node*top=NULL,*cur;
void push()
{
	cur=(struct node*)malloc(sizeof(struct node));
	printf("Enter current node data:\n");
	scanf("%d",&(cur->data));
	cur->next=top;
	top=cur;
}
void pop()
{

	cur=top;
	top=cur->next;
	printf("Deleted element is : %d\n",(cur->data));
	cur->next=NULL;
	free(cur);
}
void display()
{
	if(top==NULL)
		printf("stack underflow\n");
	else
	{
		cur=top;

		
	}
}
void peek()
{
	if(top!=NULL)
		printf("The top  most element is : %d\n",top->data);
	else
		exit(1);
}

int main()
{
	int ch;
	while(1)
	{
		printf("--------------\n");
		printf("programs for stack\n");
		printf("1:push\n");
		printf("2:pop\n");
		printf("3:display\n");
		printf("4:peek\n");
		printf("5:exit\n");
		printf("--------------\n");
		printf("Enter your choice\n");
		scanf("%d",&ch);
		switch(ch)
		{
		case 1: push();
		 break;
			
		case 2: pop();
			break;
		case 3: display();
			break;
		case 4: peek();
			break;
		case 5: exit(0);
		}
	}
	return 0;

}



Output :

--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
1
Enter current node data:
10
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
1
Enter current node data:
20
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
1
Enter current node data:
30
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
1
Enter current node data:
40
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
3
stack=>40->30->20->10->--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
2
Deleted element is : 40
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
4
The top  most element is : 30
--------------
programs for stack
1:push
2:pop
3:display
4:peek
5:exit
--------------
Enter your choice
5
